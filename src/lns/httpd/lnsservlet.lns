pub interface inStream {
   pub fn read(size:int) mut : str!,str;
   pub fn readAll() mut :str!,str;
}

pub interface outStream {
   pub fn write(bin:str) mut : str;
}

pub class luaInStream extend (inStream) {
   let mut stream:iStream;
   fn readStream( mode:stem ) mut : str!,str {
      if! let bin = self.stream.read( mode ) {
         return bin, "";
      }
      return nil, "err";
   }
   pub fn read(size:int) mut :str!,str {
      return self.readStream( size )**;
   }
   pub fn readAll() mut :str!,str {
      return self.readStream( "*a" )**;
   }
}

pub class luaOutStream extend (outStream) {
   let mut stream:oStream;
   pub fn write(bin:str) mut : str {
      let _, err = self.stream.write( bin );
      when! err {
         return err;
      }
      return "";
   }
}

pub form writerFunc( stream:outStream );

pub class ResponseInfo {
   pub let mut StatusCode:int;
   pub let mut Header:Map<str,List<str>>;
   pub let mut Writer:writerFunc!;
   pub let mut Txt:str!;

   pub fn __init() {
      self.StatusCode = 200;
      self.Header = {};
      self.Writer = nil;
      self.Txt = "";
   }
}

pub class RequestInfo {
   pub let Method:str;
   pub let Url:str;
   pub let Header:Map<str,List<str>>;
   pub let mut Reader:inStream;
}

pub form handlerFunc( req:RequestInfo ) : ResponseInfo;
pub class HandlerInfo {
    pub let Path:str;
    pub let Handler: handlerFunc;
}

pub class HostingInfo {
   pub let LocalPath:str;
   pub let UrlPath:str;
}
